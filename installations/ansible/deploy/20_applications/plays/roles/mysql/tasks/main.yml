#--------------------------------------------------------------------------------
# Delete previous installation and clear application_home.
#--------------------------------------------------------------------------------

- name: "Stop port forwarding to the application pod"
  shell: |
    cd {{ application_home }}
    for f in $( ls *.pid ) ; do kill $( cat ${f} && rm ${f} ) ; done
  ignore_errors: true

#- name: "Check {{ application }} has been installed"
#  shell: |
#    kubectl get pod { item.name }} -n {{ item.namespace }}
#  register: isAppInstalled
#  ignore_errors: true
#  with_items: "{{ apps }}"
#
#- debug:
#    msg: "{{ isAppInstalled }}"

- name: "Delete {{ application }} application"
  shell: |
    cd {{ application_home }}
    kubectl delete -f {{ item.manifest }}
  ignore_errors: true
  with_items: "{{ apps }}"

- name: "Wait {{ application }} application terminated"
  shell: |
    cd {{ application_home }}
    while [ "$(kubectl get pod -n {{ item.namespace }} --no-headers | grep {{ item.name }} | awk '{ print $3 }')" == "Terminating" ]
      do kubectl get pod -n {{ item.namespace }}
      sleep 3
    done
  ignore_errors: true
  with_items: "{{ apps }}"

- name: "Check terminated for sure"
  shell: |
    kubectl get pods --all-namespaces
  ignore_errors: true

- name: "Clear {{ application_home }}"
  file:
    path:     "{{ application_home }}"
    state:    "absent"

#--------------------------------------------------------------------------------
# Provision application artefacts
#--------------------------------------------------------------------------------
- name: "Create {{ application_home }}"
  file:
    path:     "{{ application_home }}"
    state:    "directory"
    group:    "{{ K8S_GROUP }}"
    mode:     "0750"

#- name: "Git clone {{ application }} application"
#  shell: |
#    git clone {{ application_git_url }} {{ application_home }}

- name: "Copy {{ application }}"
  template:
    src:      "{{ role_path }}/templates/{{ item.manifest }}"
    dest:     "{{ application_home }}/{{ item.manifest }}"
    owner:    "{{ K8S_ADMIN }}"
    mode:     0644
  with_items: "{{ apps }}"

#--------------------------------------------------------------------------------
# Deploy application
#--------------------------------------------------------------------------------
- name: "Deploy {{ application }} application"
  shell: |
    cd {{ application_home }}
    kubectl apply -f {{ item.manifest }}
  with_items: "{{ apps }}"

- name: "Wait for {{ application }} ready"
  shell: |
    cd {{ application_home }}
    while [ "$(kubectl get pod -n {{ item.namespace }} --no-headers --selector=app={{ item.name }} | head -n 1 | awk '{ print $3 }')" != "Running" ]
      do kubectl get pod -n {{ item.namespace }} | tee -a {{ item.name }}.log
      sleep 1
    done
  with_items: "{{ apps }}"

- name: "Port forward from {{ item.node_port }} of the host to {{ item.pod_port }} in pod"
  shell: |
    POD="$(kubectl get pod -n {{ item.namespace }} --no-headers --selector=app={{ item.name }} | head -n 1 | awk '{ print $1 }')"
    echo ${POD}
    nohup kubectl port-forward ${POD} {{ item.node_port }}:{{ item.pod_port }} &
    echo $! > {{ item.name }}.pid
  with_items: "{{ apps }}"

#--------------------------------------------------------------------------------
# Load sample data
#--------------------------------------------------------------------------------
- name: "Copy {{ application }} SQL files"
  copy:
    src:      "{{ item }}"
    dest:     "{{ application_home }}/{{ item|basename }}"
    owner:    "{{ K8S_ADMIN }}"
    mode:     0644
  with_fileglob:
    - "{{ role_path }}/sqls/*"

#- name: "Load data"
#  expect:
#    command: mysql -h $(kubectl get svc --selector=app=mysql --no-headers | awk '{ print $3 }') -u root -p < {{ item|basename }})
#    responses:
#      Enter password: "{{ mysql_password }}"
#    chdir:    "{{ application_home }}"
#  with_fileglob:
#    - "{{ role_path }}/sqls/*"

- name: "Load data"
  shell: |
    mysql -h $(kubectl get svc --selector=app=mysql --no-headers | awk '{ print $3 }') -u root -p'{{ mysql_password }}'  < {{ item|basename }}
  args:
    chdir:    "{{ application_home }}"
  with_fileglob:
    - "{{ role_path }}/sqls/*"



# To access kuard:
# ssh -i ~/.ssh/aws_maonishi_us-west-1pem.pem -L localhost:8080:127.0.0.1:8080 centos@50.18.71.232
# http://localhost:8080