#--------------------------------------------------------------------------------
# Clean up previous intallation.
#--------------------------------------------------------------------------------
- name: "Delete dd-agent."
  shell: |
    stat -f ~{{ K8S_ADMIN }}/dd-agent.yaml && kubectl delete -f ~{{ K8S_ADMIN }}/dd-agent.yaml
    rm -f ~{{ K8S_ADMIN }}/dd-agent.yaml
  ignore_errors: true

- name: "Delete secrets for api server client certifiate and key"
  shell: |
    export KUBECONFIG=/etc/kubernetes/admin.conf
    kubectl get secret k8s-certs && kubectl delete secret k8s-certs
  become: true
  become_user: root
  ignore_errors: true

#--------------------------------------------------------------------------------
# Create secrets for client certificates for dd-agent to use.
#--------------------------------------------------------------------------------
- name: "Create secrets for api server client certifiate and key"
  shell: >
    KUBECONFIG=/etc/kubernetes/admin.conf
    kubectl create secret generic k8s-certs
    --from-file=/etc/kubernetes/pki/apiserver-kubelet-client.crt
    --from-file=/etc/kubernetes/pki/apiserver-kubelet-client.key
    --from-file=/etc/kubernetes/pki/ca.crt
  become: true
  become_user: root


#--------------------------------------------------------------------------------
# Datadog K8S agent setups as daemonset
#--------------------------------------------------------------------------------
- name: "Place dd-agent daemonset manifest."
  template:
    src: "{{ role_path }}/templates/dd-agent.yaml.j2"
    dest: "~{{ K8S_ADMIN }}/dd-agent.yaml"
    owner: "{{ K8S_ADMIN }}"
    mode: 0644

#- name: "Check if dd-agent has been installed."
#  shell: |
#    kubectl get daemonset dd-agent
#  register: isDDAgentRunning
#  ignore_errors: "true"

#- name: "Delete dd-agent if already installed."
#  shell: |
#    kubectl delete daemonset dd-agent
#  when: isDDAgentRunning.rc == 0

- name: "Deploy dd-agent."
  shell: |
    kubectl create -f ~{{ K8S_ADMIN }}/dd-agent.yaml

#--------------------------------------------------------------------------------
# kube-state-metrcs
# https://github.com/kubernetes/kube-state-metrics
# No need to build the docker image. It is already in the docker registry.
# kubectl apply -f kubernetes can be repeately applicable with no error.
#--------------------------------------------------------------------------------
- name: "DD agent leader election for kube-state-mertic event collection"
  template:
    src: "{{ role_path }}/templates/dd_leader_election.yaml.j2"
    dest: "~{{ K8S_ADMIN }}/dd_leader_election.yaml"
    owner: "{{ K8S_ADMIN }}"
    group: "{{ K8S_GROUP }}"
    mode: 0660

- name: "Check if datadog cluster role exists"
  shell: |
    kubectl get ClusterRole datadog
  register: _existsDDClusterRole
  ignore_errors: true

- name: "Deploy datadog cluster role"
  shell: |
    kubectl create -f ~{{ K8S_ADMIN }}/dd_leader_election.yaml
  when: _existsDDClusterRole.rc != 0

- name: "Update datadog cluster role"
  shell: |
    kubectl apply -f ~{{ K8S_ADMIN }}/dd_leader_election.yaml
  when: _existsDDClusterRole.rc == 0

- name: "Deploy kube-state-metrics"
  shell: |
    cd ~{{ K8S_ADMIN }}
    go get k8s.io/kube-state-metrics
    cd go/src/k8s.io/kube-state-metrics
    kubectl apply -f kubernetes


#--------------------------------------------------------------------------------
# Start kube proxy on master
#--------------------------------------------------------------------------------
#- name: "Check kube proxy"
#  shell: |
#    netstat -tnlp | grep {{ KUBEPROXY_PORT }}
#  register: isKubeProxyRunning
#  ignore_errors: true

# export KUBECONFIG=/etc/kubernetes/admin.conf is MUST
#- name: "Start kube proxy"
#  shell: |
#    nohup kubectl proxy --port={{ KUBEPROXY_PORT }} --address={{ K8S_MASTER_NODE_IP }} --accept-hosts='{{ KUBEPROXY_ACCEPT_HOSTS }}'&
#  when: isKubeProxyRunning.rc != 0
