init_config:

instances:
{% for item in ENDPOINTS_ETCD_HEALTH %}
  # API endpoint of your etcd instance
  - url:                  "{{ ENDPOINTS_ETCD_HEALTH[item].protocol }}://{{ ENDPOINTS_ETCD_HEALTH[item].host }}:{{ ENDPOINTS_ETCD_HEALTH[item].port }}"
    name:                 {{ inventory_hostname }}-{{ item }}
    # Change the time to wait on an etcd API request
    # timeout: 5

{% if ENDPOINTS_ETCD_HEALTH[item].protocol == 'https' %}
    # If certificate-based authentication of clients is enabled on your etcd server,
    # specify the key file and the certificate file that the check should use.
    ssl_keyfile:          {{ ENDPOINTS_ETCD_HEALTH[item].client_key }}
    ssl_certfile:         {{ ENDPOINTS_ETCD_HEALTH[item].client_cert }}

    # Set to `false` to disable the validation of the server's SSL certificates (default: true).
    ssl_cert_validation:  true

    # If ssl_cert_validation is enabled, you can provide a custom file
    # that lists trusted CA certificates (optional).
    ssl_ca_certs:         {{ ENDPOINTS_ETCD_HEALTH[item].ca_certs }}
{% endif %}

    tags:
      - datadog_check:etcd
      - datadog_node:{{ ansible_fqdn }}
      - datadog_target:{{ item }}
      - description:datadog check to test connectivity to {{ item }} on the node {{ ansible_fqdn }}
      - url:{{ ENDPOINTS_ETCD_HEALTH[item].protocol }}://{{ ENDPOINTS_ETCD_HEALTH[item].host }}:{{ ENDPOINTS_ETCD_HEALTH[item].port }}
{% endfor %}
