#------------------------------------------------------------------------
# https://docs.datadoghq.com/integrations/kubernetes/#kubernetes-state-metrics
# leader election option for the Kubernetes event collector.
# DD Agents coordinate by performing a leader election among members of
# the Datadog DaemonSet through kubernetes to ensure only one leader agent
# instance is gathering events at a given time.
#------------------------------------------------------------------------
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: datadog
rules:
- nonResourceURLs:
  - "/version"  # Used to get apiserver version metadata
  - "/healthz"  # Healthcheck
  verbs: ["get"]
- apiGroups: [""]
  resources:
    - "nodes"
    - "namespaces"  #
    - "events"      # Cluster events + kube_service cache invalidation
    - "services"    # kube_service tag
  verbs: ["get", "list"]
- apiGroups: [""]
  resources:
    - "configmaps"
  resourceNames: ["datadog-leader-elector"]
  verbs: ["get", "delete", "update"]
- apiGroups: [""]
  resources:
    - "configmaps"
  verbs: ["create"]

# defined in dd-agent.yaml
#---
# You need to use that account for your dd-agent DaemonSet
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: datadog
#automountServiceAccountToken: true

# Your admin user needs the same permissions to be able to grant them
# Easiest way is to bind your user to the cluster-admin role
# See https://cloud.google.com/container-engine/docs/role-based-access-control#setting_up_role-based_access_control
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: datadog
subjects:
- kind: ServiceAccount
  name: datadog
  namespace: default
roleRef:
  kind: ClusterRole
  name: datadog
  apiGroup: rbac.authorization.k8s.io