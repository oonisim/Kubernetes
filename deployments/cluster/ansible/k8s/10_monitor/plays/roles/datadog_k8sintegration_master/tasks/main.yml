- name: "Adding {{ K8S_ADMIN }} to dd-agent group"
  user:
    name:   "{{ item }}"
    groups: "dd-agent"
    append: "yes"                 # useradd -aG
  with_items:
     - "{{ K8S_ADMIN }}"

#--------------------------------------------------------------------------------
# Clean up previous intallation.
#--------------------------------------------------------------------------------
- name: "Delete secrets for api server client certifiate and key"
  become: true
  become_user: "{{ K8S_ADMIN }}"
  shell: |
    kubectl get secret k8s-certs && kubectl delete secret k8s-certs
  ignore_errors: true

#--------------------------------------------------------------------------------
# Create secrets for client certificates for dd-agent to use.
#--------------------------------------------------------------------------------
- name: "Create secrets for api server client certifiate and key"
  shell: >
    KUBECONFIG={{ KUBECONFIG_ADMIN }}
    kubectl create secret generic k8s-certs
    --from-file={{ APISERVER_CLIENT_CRT }}
    --from-file={{ APISERVER_CLIENT_KEY }}
    --from-file={{ APISERVER_CA_CRT }}
    --from-file={{ KUBELET_CA_CRT }}
#    --from-file={{ KUBELET_CLIENT_CRT }}
#    --from-file={{ KUBELET_CLIENT_KEY }}
#    --from-file={{ ETCD_CLIENT_CRT }}
#    --from-file={{ ETCD_CLIENT_KEY }}
#    --from-file={{ ETCD_CA_CRT }}
  become: true
  become_user: root

#--------------------------------------------------------------------------------
# Datadog K8S agent setups as daemonset
#--------------------------------------------------------------------------------
- name: "mkdir {{ DATADOG_MANIFEST_HOME }} if not exist"
  file:
    path:   "{{ DATADOG_MANIFEST_HOME }}"
    state:  "directory"
    owner:  "dd-agent"
    group:  "dd-agent"
    mode:   0770

- name: "Place dd-agent daemonset manifest."
  template:
    src:    "{{ role_path }}/templates/dd-agent.yaml"
    dest:   "{{ DATADOG_MANIFEST_HOME }}/dd-agent.yaml"
    owner:  "dd-agent"
    group:  "dd-agent"
    mode:   0660

#- name: "Check if dd-agent has been installed."
#  shell: |
#    kubectl get daemonset dd-agent
#  register: isDDAgentRunning
#  ignore_errors: "true"

#- name: "Delete dd-agent if already installed."
#  shell: |
#    kubectl delete daemonset dd-agent
#  when: isDDAgentRunning.rc == 0

- name: "Delete dd-agent if exists"
  become: true
  become_user: "{{ K8S_ADMIN }}"
  shell: |
    kubectl delete -f {{ DATADOG_MANIFEST_HOME }}/dd-agent.yaml
  ignore_errors: true

- name: "Deploy dd-agent."
  become: true
  become_user: "{{ K8S_ADMIN }}"
  shell: |
    kubectl create -f {{ DATADOG_MANIFEST_HOME }}/dd-agent.yaml

- name: "DD agent leader election for kube-state-mertic event collection"
  template:
    src:    "{{ role_path }}/templates/dd_rbac.yaml"
    dest:   "{{ DATADOG_MANIFEST_HOME }}/dd-rbac.yaml"
#    owner:  "{{ K8S_ADMIN }}"
#    group:  "{{ K8S_GROUP }}"
    owner:  "dd-agent"
    group:  "dd-agent"
    mode:   0660

- name: "Deploy datadog cluster role"
  become: true
  become_user: "{{ K8S_ADMIN }}"
  shell: |
    kubectl delete -f {{ DATADOG_MANIFEST_HOME }}/dd-rbac.yaml
  ignore_errors: true

- name: "Update datadog cluster role"
  become: true
  become_user: "{{ K8S_ADMIN }}"
  shell: |
    kubectl apply -f {{ DATADOG_MANIFEST_HOME }}/dd-rbac.yaml

#- name: "Deploy kube-state-metrics"
#  shell: |
#    cd ~{{ K8S_ADMIN }}
#    go get k8s.io/kube-state-metrics
#    cd go/src/k8s.io/kube-state-metrics
#    kubectl apply -f kubernetes
